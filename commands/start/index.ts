import { CommandContext, GrammyError } from "grammy";
import { getUserMappings } from "../../utils/supabase";
import { startRegistrationFlow } from "../../utils/registration";

export async function handleStart(ctx: CommandContext<any>) {
  try {
    const userId = ctx.from?.id;
    const telegramUsername = ctx.from?.username;

    if (!userId) {
      await ctx.reply("‚ùå Unable to get your user information. Please try again.");
      return;
    }

    if (!telegramUsername) {
      await ctx.reply(
        "‚ùå You need to set a Telegram username to use this bot.\n\n" +
        "Go to Telegram Settings ‚Üí Username and create one, then try /start again."
      );
      return;
    }

    // Check if user is already registered
    const existingMappings = await getUserMappings(telegramUsername);
    
    if (existingMappings && (existingMappings.chess || existingMappings.lichess)) {
      let platformsText = "";
      if (existingMappings.chess) platformsText += `‚ôüÔ∏è Chess.com: ${existingMappings.chess}\n`;
      if (existingMappings.lichess) platformsText += `‚ôüÔ∏è Lichess: ${existingMappings.lichess}\n`;
      
      // Check if user has both platforms registered
      if (existingMappings.chess && existingMappings.lichess) {
        await ctx.reply(
          `üëã –•—É—à –æ–º–∞–¥–µ–¥! / Welcome back!\n\n` +
          `–®—É–º–æ –¥–∞—Ä “≥–∞—Ä–¥—É –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ —Å–∞–±—Ç —à—É–¥–∞–µ–¥:\n` +
          `You're registered on both platforms:\n` +
          `üéØ Telegram: @${telegramUsername}\n` +
          platformsText + "\n" +
          `–§–∞—Ä–º–æ–Ω“≥–æ–∏ –¥–∞—Å—Ç—Ä–∞—Å / Available commands:\n` +
          `üìä /stats - –û–º–æ—Ä–∏ —à–∞—Ö–º–∞—Ç / View your chess statistics\n` +
          `üèÜ /top - –†–µ–π—Ç–∏–Ω–≥ / See leaderboards\n` +
          `üèÜ /standings - Championship standings\n` +
          `‚öîÔ∏è /score @user1 @user2 - –ú—É“õ–æ–∏—Å–∞–∏ –±–æ–∑–∏–≥–∞—Ä–æ–Ω / Compare players\n\n` +
          `üèÜ Daily Championship: Top 3 players earn points daily!\n` +
          `Awards: ü•á300pts, ü•à200pts, ü•â100pts (need 3+ games)`
        );
        return;
      }
      
      // User has only one platform, offer to add the other
      const missingPlatform = existingMappings.chess ? 'Lichess' : 'Chess.com';
      const missingPlatformNumber = existingMappings.chess ? '2' : '1';
      
      await ctx.reply(
        `üëã –•—É—à –æ–º–∞–¥–µ–¥! / Welcome back!\n\n` +
        `–®—É–º–æ –∞–ª–ª–∞–∫–∞–π —Å–∞–±—Ç —à—É–¥–∞–µ–¥:\n` +
        `You're already registered:\n` +
        `üéØ Telegram: @${telegramUsername}\n` +
        platformsText + "\n" +
        `‚ûï –û—ë –º–µ—Ö–æ“≥–µ–¥ ${missingPlatform}-—Ä–æ –Ω–∏–∑ –∏–ª–æ–≤–∞ –∫—É–Ω–µ–¥?\n` +
        `‚ûï Would you like to add ${missingPlatform} as well?\n\n` +
        `–ê–≥–∞—Ä “≥–∞, —Ä–∞“õ–∞–º–∏ ${missingPlatformNumber}-—Ä–æ –∏–Ω—Ç–∏—Ö–æ–± –∫—É–Ω–µ–¥:\n` +
        `If yes, select option ${missingPlatformNumber}:\n\n` +
        `1Ô∏è‚É£ Chess.com\n` +
        `2Ô∏è‚É£ Lichess\n\n` +
        `–Å "–Ω–µ/no" –±–∞—Ä–æ–∏ –±–µ–∫–æ—Ä –∫–∞—Ä–¥–∞–Ω / Or "no" to cancel`
      );
      
      // Set user to platform selection state with existing data
      startRegistrationFlow(userId);
      return;
    }

    // Start registration flow for new users
    startRegistrationFlow(userId);
    
    await ctx.reply(
      "üëã –•—É—à –æ–º–∞–¥–µ–¥ –±–∞ Magnus Bot! / Welcome to Magnus Bot!\n\n" +
      "üéØ –ë–∏—ë–µ–¥ “≥–∏—Å–æ–±–∏ —à–∞—Ö–º–∞—Ç–∏–∏ —Ö—É–¥—Ä–æ —Å–∞–±—Ç –∫—É–Ω–µ–º.\n" +
      "üéØ Let's register your chess account.\n\n" +
      "–ö–∞–¥–æ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ä–æ –∏–Ω—Ç–∏—Ö–æ–± –º–µ–∫—É–Ω–µ–¥?\n" +
      "Which platform would you like to choose?\n\n" +
      "1Ô∏è‚É£ Chess.com\n" +
      "2Ô∏è‚É£ Lichess\n\n" +
      "–†–∞“õ–∞–º–∏ –∏–Ω—Ç–∏—Ö–æ–±—Ä–æ –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥ (1 —ë 2):\n" +
      "Enter your choice number (1 or 2):"
    );
  } catch (err) {
    const errorContext = {
      updateId: ctx.update.update_id,
      userId: ctx.from?.id,
      chatId: ctx.chat?.id,
      timestamp: new Date().toISOString()
    };

    if (err instanceof GrammyError && err.description.includes("bot was blocked by the user")) {
      console.log(JSON.stringify({
        level: "warn",
        type: "bot_blocked",
        message: `Bot was blocked by user ${ctx.from?.id}`,
        ...errorContext,
        error: err.description
      }));
    } else {
      console.log(JSON.stringify({
        level: "error",
        type: "reply_failed",
        message: "Failed to send reply in /start",
        ...errorContext,
        error: err instanceof Error ? err.message : String(err)
      }));
    }
  }
}

// Legacy function - keeping for compatibility but not using GitHub flow anymore
export async function handleUsername(ctx: any) {
  // This function is now handled by the registration flow
  // We'll redirect to the new registration system
  const userId = ctx.from?.id;
  if (userId) {
    const { handleRegistration } = await import("../../utils/registration");
    await handleRegistration(ctx);
  }
}