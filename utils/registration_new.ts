import { Context } from "grammy";
import { saveUserMapping } from "../utils/supabase";
import { verifyChessComUser, verifyLichessUser } from "../utils/chessApis";

// Store user states for registration flow
const userStates = new Map<number, { 
  step: 'waiting_for_platform' | 'waiting_for_chess_username' | 'waiting_for_lichess_username' | 'waiting_for_additional_platform';
  chessUsername?: string;
  lichessUsername?: string;
}>();

export async function handleRegistration(ctx: Context): Promise<void> {
  const userId = ctx.from?.id;
  if (!userId) return;

  const text = ctx.message?.text?.trim();
  if (!text) return;

  const userState = userStates.get(userId);
  
  if (userState?.step === 'waiting_for_platform') {
    await handlePlatformSelection(ctx, text);
  } else if (userState?.step === 'waiting_for_chess_username') {
    await handleChessUsernameInput(ctx, text);
  } else if (userState?.step === 'waiting_for_lichess_username') {
    await handleLichessUsernameInput(ctx, text);
  } else if (userState?.step === 'waiting_for_additional_platform') {
    await handleAdditionalPlatformSelection(ctx, text);
  }
}

async function handlePlatformSelection(ctx: Context, selection: string): Promise<void> {
  const userId = ctx.from?.id;
  if (!userId) return;

  const choice = selection.toLowerCase();
  
  if (choice === '1' || choice === 'chess.com' || choice === 'chesscom') {
    userStates.set(userId, { step: 'waiting_for_chess_username' });
    await ctx.reply(
      "‚ôüÔ∏è Chess.com —Ç–∞–Ω–ª–∞–Ω–¥–∏! / Chess.com selected!\n\n" +
      "–õ—É—Ç—Ñ–∞–Ω –Ω–æ–º–∏ –∫–æ—Ä–±–∞—Ä–∏–∏ Chess.com-–∏ —Ö—É–¥—Ä–æ –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥:\n" +
      "Please enter your Chess.com username:"
    );
  } else if (choice === '2' || choice === 'lichess') {
    userStates.set(userId, { step: 'waiting_for_lichess_username' });
    await ctx.reply(
      "‚ôüÔ∏è Lichess —Ç–∞–Ω–ª–∞–Ω–¥–∏! / Lichess selected!\n\n" +
      "–õ—É—Ç—Ñ–∞–Ω –Ω–æ–º–∏ –∫–æ—Ä–±–∞—Ä–∏–∏ Lichess-–∏ —Ö—É–¥—Ä–æ –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥:\n" +
      "Please enter your Lichess username:"
    );
  } else {
    await ctx.reply(
      "‚ùå –ò–Ω—Ç–∏—Ö–æ–±–∏ –Ω–æ–¥—É—Ä—É—Å—Ç. –õ—É—Ç—Ñ–∞–Ω 1 —ë 2-—Ä–æ –∏–Ω—Ç–∏—Ö–æ–± –∫—É–Ω–µ–¥:\n" +
      "‚ùå Invalid choice. Please select 1 or 2:\n\n" +
      "1Ô∏è‚É£ Chess.com\n" +
      "2Ô∏è‚É£ Lichess"
    );
  }
}

async function handleChessUsernameInput(ctx: Context, chessUsername: string): Promise<void> {
  const userId = ctx.from?.id;
  const telegramUsername = ctx.from?.username;
  
  if (!userId || !telegramUsername) {
    await ctx.reply("‚ùå Unable to get your Telegram information. Please try again.");
    return;
  }

  // Validate chess.com username format (basic validation)
  if (chessUsername.length < 3 || chessUsername.length > 25) {
    await ctx.reply("‚ùå Invalid username. Chess.com usernames must be 3-25 characters long. Please try again:");
    return;
  }

  // Verify the chess.com username exists by making an API call
  const isValidUser = await verifyChessComUser(chessUsername);
  if (!isValidUser) {
    await ctx.reply(`‚ùå Chess.com user "${chessUsername}" not found. Please check the spelling and try again:`);
    return;
  }

  // Get current state to preserve any existing lichess username
  const currentState = userStates.get(userId);
  const lichessUsername = currentState?.lichessUsername;

  // Save to database
  const result = await saveUserMapping(telegramUsername, chessUsername, lichessUsername);
  
  if (!result.success) {
    await ctx.reply(`‚ùå –•–∞—Ç–æ–≥”£ “≥–∞–Ω–≥–æ–º–∏ —Å–∞–±—Ç: ${result.error}\n‚ùå Error during registration: ${result.error}`);
    return;
  }

  // Remove user from registration flow
  userStates.delete(userId);

  await ctx.reply(
    "‚úÖ –ú—É–≤–∞—Ñ—Ñ–∞“õ–∏—è—Ç! –®—É–º–æ —Å–∞–±—Ç —à—É–¥–µ–¥! / Success! You are registered!\n\n" +
    `üéØ Telegram: @${telegramUsername}\n` +
    `‚ôüÔ∏è Chess.com: ${chessUsername}\n` +
    `${lichessUsername ? `‚ôüÔ∏è Lichess: ${lichessUsername}\n` : ''}` +
    "\n“≤–æ–∑–∏—Ä —à—É–º–æ –º–µ—Ç–∞–≤–æ–Ω–µ–¥:\n" +
    "Now you can use:\n" +
    "üìä /stats - –û–º–æ—Ä–∏ —à–∞—Ö–º–∞—Ç / View your chess statistics\n" +
    "üèÜ /top - –†–µ–π—Ç–∏–Ω–≥ / See leaderboards\n" +
    "‚öîÔ∏è /score @user1 @user2 - –ú—É“õ–æ–∏—Å–∞–∏ –±–æ–∑–∏–≥–∞—Ä–æ–Ω / Compare players"
  );

  // Ask if they want to add the other platform
  if (!lichessUsername) {
    userStates.set(userId, { 
      step: 'waiting_for_additional_platform',
      chessUsername 
    });
    await ctx.reply(
      "‚ûï –û—ë —à—É–º–æ –º–µ—Ö–æ“≥–µ–¥ Lichess-—Ä–æ –Ω–∏–∑ –∏–ª–æ–≤–∞ –∫—É–Ω–µ–¥?\n" +
      "‚ûï Would you like to also add Lichess?\n\n" +
      "“∂–∞–≤–æ–± –¥–∏“≥–µ–¥: “≥–∞/–±–∞–ª–µ/yes —ë –Ω–µ/–Ω–µ—Å—Ç/no"
    );
  }
}

async function handleLichessUsernameInput(ctx: Context, lichessUsername: string): Promise<void> {
  const userId = ctx.from?.id;
  const telegramUsername = ctx.from?.username;
  
  if (!userId || !telegramUsername) {
    await ctx.reply("‚ùå Unable to get your Telegram information. Please try again.");
    return;
  }

  // Validate lichess username format (basic validation)
  if (lichessUsername.length < 3 || lichessUsername.length > 20) {
    await ctx.reply("‚ùå Invalid username. Lichess usernames must be 3-20 characters long. Please try again:");
    return;
  }

  // Verify the lichess username exists by making an API call
  const isValidUser = await verifyLichessUser(lichessUsername);
  if (!isValidUser) {
    await ctx.reply(`‚ùå Lichess user "${lichessUsername}" not found. Please check the spelling and try again:`);
    return;
  }

  // Get current state to preserve any existing chess.com username
  const currentState = userStates.get(userId);
  const chessUsername = currentState?.chessUsername;

  // Save to database
  const result = await saveUserMapping(telegramUsername, chessUsername, lichessUsername);
  
  if (!result.success) {
    await ctx.reply(`‚ùå –•–∞—Ç–æ–≥”£ “≥–∞–Ω–≥–æ–º–∏ —Å–∞–±—Ç: ${result.error}\n‚ùå Error during registration: ${result.error}`);
    return;
  }

  // Remove user from registration flow
  userStates.delete(userId);

  await ctx.reply(
    "‚úÖ –ú—É–≤–∞—Ñ—Ñ–∞“õ–∏—è—Ç! –®—É–º–æ —Å–∞–±—Ç —à—É–¥–µ–¥! / Success! You are registered!\n\n" +
    `üéØ Telegram: @${telegramUsername}\n` +
    `${chessUsername ? `‚ôüÔ∏è Chess.com: ${chessUsername}\n` : ''}` +
    `‚ôüÔ∏è Lichess: ${lichessUsername}\n\n` +
    "“≤–æ–∑–∏—Ä —à—É–º–æ –º–µ—Ç–∞–≤–æ–Ω–µ–¥:\n" +
    "Now you can use:\n" +
    "üìä /stats - –û–º–æ—Ä–∏ —à–∞—Ö–º–∞—Ç / View your chess statistics\n" +
    "üèÜ /top - –†–µ–π—Ç–∏–Ω–≥ / See leaderboards\n" +
    "‚öîÔ∏è /score @user1 @user2 - –ú—É“õ–æ–∏—Å–∞–∏ –±–æ–∑–∏–≥–∞—Ä–æ–Ω / Compare players"
  );

  // Ask if they want to add the other platform
  if (!chessUsername) {
    userStates.set(userId, { 
      step: 'waiting_for_additional_platform',
      lichessUsername 
    });
    await ctx.reply(
      "‚ûï –û—ë —à—É–º–æ –º–µ—Ö–æ“≥–µ–¥ Chess.com-—Ä–æ –Ω–∏–∑ –∏–ª–æ–≤–∞ –∫—É–Ω–µ–¥?\n" +
      "‚ûï Would you like to also add Chess.com?\n\n" +
      "“∂–∞–≤–æ–± –¥–∏“≥–µ–¥: “≥–∞/–±–∞–ª–µ/yes —ë –Ω–µ/–Ω–µ—Å—Ç/no"
    );
  }
}

async function handleAdditionalPlatformSelection(ctx: Context, response: string): Promise<void> {
  const userId = ctx.from?.id;
  if (!userId) return;

  const currentState = userStates.get(userId);
  if (!currentState) return;

  const answer = response.toLowerCase();
  const isYes = ['“≥–∞', '–±–∞–ª–µ', 'yes', 'y', 'ha', 'bale'].includes(answer);
  const isNo = ['–Ω–µ', '–Ω–µ—Å—Ç', 'no', 'n', 'ne', 'nest'].includes(answer);

  if (isYes) {
    if (currentState.chessUsername) {
      // They already have chess.com, ask for lichess
      userStates.set(userId, { 
        step: 'waiting_for_lichess_username',
        chessUsername: currentState.chessUsername 
      });
      await ctx.reply(
        "‚ôüÔ∏è –õ—É—Ç—Ñ–∞–Ω –Ω–æ–º–∏ –∫–æ—Ä–±–∞—Ä–∏–∏ Lichess-–∏ —Ö—É–¥—Ä–æ –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥:\n" +
        "‚ôüÔ∏è Please enter your Lichess username:"
      );
    } else {
      // They already have lichess, ask for chess.com
      userStates.set(userId, { 
        step: 'waiting_for_chess_username',
        lichessUsername: currentState.lichessUsername 
      });
      await ctx.reply(
        "‚ôüÔ∏è –õ—É—Ç—Ñ–∞–Ω –Ω–æ–º–∏ –∫–æ—Ä–±–∞—Ä–∏–∏ Chess.com-–∏ —Ö—É–¥—Ä–æ –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥:\n" +
        "‚ôüÔ∏è Please enter your Chess.com username:"
      );
    }
  } else if (isNo) {
    userStates.delete(userId);
    await ctx.reply(
      "‚úÖ –•—É–±! –®—É–º–æ “≥–∞—Ä –≤–∞“õ—Ç –º–µ—Ç–∞–≤–æ–Ω–µ–¥ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–∏ –¥–∏–≥–∞—Ä—Ä–æ –±–æ /start –∏–ª–æ–≤–∞ –∫—É–Ω–µ–¥.\n" +
      "‚úÖ Great! You can always add the other platform later with /start."
    );
  } else {
    await ctx.reply(
      "‚ùå –õ—É—Ç—Ñ–∞–Ω “≥–∞/–±–∞–ª–µ/yes —ë –Ω–µ/–Ω–µ—Å—Ç/no “∑–∞–≤–æ–± –¥–∏“≥–µ–¥:\n" +
      "‚ùå Please answer yes or no:"
    );
  }
}

export function startRegistrationFlow(userId: number): void {
  userStates.set(userId, { step: 'waiting_for_platform' });
}

export function isUserInRegistrationFlow(userId: number): boolean {
  return userStates.has(userId);
}
